use std::str::FromStr;
use std::collections::HashMap;
use crate::term::Term;
use crate::termtype::Type;

grammar;

pub Term: Term = {
    <ProjectableTerm>,
    "true" => Term::True,
    "false" => Term::False,
    <n: Num> => Term::Int(n),
    "if" <test: Term> "then" <consequent: Term> "else" <alternate: Term> => {
        Term::If(Box::new(test), Box::new(consequent), Box::new(alternate))
    },
    <target: ProjectableTerm> "." <field: Ident> => {
        Term::Proj(Box::new(target), field)
    },
    "(" <param: Ident> ":" <param_type: TermType>  ")" "=>" <body: Term> => {
        Term::Abs(param, Box::new(param_type), Box::new(body))
    },
};

ProjectableTerm: Term = {
    <name: Ident> => Term::Var(name),
    "(" <t: Term> ")" => t,
    "[" <callee: Term> <argument: Term> "]" => {
        Term::App(Box::new(callee), Box::new(argument))
    },
    "{" <fields: Comma<Term>> "}" => Term::Record(fields),
}

pub TermType: Type = {
    <t: TermTypeAtom> => t,
    <left: TermType> "->" <right: TermTypeAtom> => {
        Type::Arrow(Box::new(left), Box::new(right))
    },
};

TermTypeAtom: Type = {
    "Bool" => Type::Bool,
    "Int" => Type::Int,
    "Any" => Type::Top,
    "(" <t: TermType> ")" => t,
    "{" <fields: Comma<TermType>> "}" => Type::Record(fields),
};

Comma<T>: HashMap<String, T> = {
    <mut v:(<Entry<T>> ",")*> <e: Entry<T>?> => match e {
        None => v.into_iter().collect(),
        Some(entry) => {
            v.push(entry);
            v.into_iter().collect()
        }
    }
};

Entry<T>: (String, T) = <name: Ident> ":" <body: T> => (name, body);

Ident: String = <s: r"[a-zA-Z_][a-zA-Z_0-9]*"> => String::from(s);

Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();